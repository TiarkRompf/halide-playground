Evaluating producer.store_root().compute_at(consumer, y)
--- root --- producer_root_y --- alloc buffer  ((0,0),(6,6)) size (5,2)
--- y --- producer_root_y --- fill buffer ((0,0),(5,2))
producer_root_y 0,0
producer_root_y 1,0
producer_root_y 2,0
producer_root_y 3,0
producer_root_y 4,0
producer_root_y 0,1
producer_root_y 1,1
producer_root_y 2,1
producer_root_y 3,1
producer_root_y 4,1
consumer_root_y 0,0
consumer_root_y 1,0
consumer_root_y 2,0
consumer_root_y 3,0
--- y --- producer_root_y --- fill buffer ((0,2),(5,3)) !
producer_root_y 0,2
producer_root_y 1,2
producer_root_y 2,2
producer_root_y 3,2
producer_root_y 4,2
consumer_root_y 0,1
consumer_root_y 1,1
consumer_root_y 2,1
consumer_root_y 3,1
--- y --- producer_root_y --- fill buffer ((0,3),(5,4)) !
producer_root_y 0,3
producer_root_y 1,3
producer_root_y 2,3
producer_root_y 3,3
producer_root_y 4,3
consumer_root_y 0,2
consumer_root_y 1,2
consumer_root_y 2,2
consumer_root_y 3,2
--- y --- producer_root_y --- fill buffer ((0,4),(5,5)) !
producer_root_y 0,4
producer_root_y 1,4
producer_root_y 2,4
producer_root_y 3,4
producer_root_y 4,4
consumer_root_y 0,3
consumer_root_y 1,3
consumer_root_y 2,3
consumer_root_y 3,3
Pseudo-code for the schedule:
stages: (Func(producer_root_y),(0,1),(0,1)), (Func(consumer_root_y),(0,0),(0,0))
for y:
for x:
producer_root_y(...) = ...
for y:
sub (Func(producer_root_y),(0,1),(0,1)) {
  stages: (Func(producer_root_y),(0,0),(0,0))
  for y:
  for x:
  producer_root_y(...) = ...
}
for x:
consumer_root_y(...) = ...
